{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
              name="viewport" >
        <meta content="ie=edge" http-equiv="X-UA-Compatible">

        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" rel="stylesheet">
        <link href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css" rel="stylesheet">
        <link href="https://unpkg.com/notie/dist/notie.min.css" rel="stylesheet" type="text/css">
        <link href="/static/stylesheets/styles.css" rel="stylesheet" type="text/css">
        {{block "css" .}}
            {{end}}
        <title>Document</title>

    </head>
    <body>

    <nav class="nav-bar navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler" data-bs-target="#navbarSupportedContent" data-bs-toggle="collapse" type="button">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a aria-current="page" class="nav-link active" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a aria-expanded="false" class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button">
                            Rooms
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/rooms/majors">Majors Suite</a></li>
                            <li><a class="dropdown-item" href="/rooms/generals">Generals Quarters</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a aria-disabled="true" class="nav-link" href="/make-reservation">Book now</a>
                    </li>
                    <li class="nav-item">
                        <a aria-disabled="true" class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    {{block "content" .}}
                {{end}}


    <div class="row my-footer">
        <div class="col">
            First
        </div>
        <div class="col">
            Second
        </div>
        <div class="col">
            Last
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
    <script crossorigin="anonymous" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script><script src="https://unpkg.com/notie"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

            {{block "js" .}}


            {{end}}

    <script>


        const attention=Prompt();


        function Prompt() {
            const toast = function (toastObj) {
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                } = toastObj;
                const Toast = Swal.mixin({
                    toast: true,
                    icon: icon,
                    position: position,
                    title: msg,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    }
                });
                Toast.fire({});
            }
            const success = function (successObj) {
                const {
                    msg = "",
                    text = '',
                    footer = "",
                } = successObj;


                Swal.fire({
                    icon: "success",
                    title: msg,
                    text: text,
                    footer: footer,
                });
            }
            const error = function (errorObj) {
                const {
                    msg = "",
                    text = '',
                    footer = "",
                } = errorObj;


                Swal.fire({
                    icon: "error",
                    title: msg,
                    text: text,
                    footer: footer,
                });
            }
            const datePicker = async function (c) {
                const {
                    msg = "",
                    title = "",
                } = c;
                const {value: result} = await Swal.fire({
                    title: title,
                    html: msg,
                    focusConfirm: false,
                    backdrop: false,
                    showCancelButton: true,
                    willOpen: () => {
                        if (c.willOpen !== undefined) {
                            c.willOpen()
                        }
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById("start").value,
                            document.getElementById("end").value
                        ];
                    },
                    didOpen: () => {
                        if (c.didOpen !== undefined) {
                            c.didOpen()
                        }

                    }
                });
                if (result) {
                    if (result.dismiss !== Swal.DismissReason.cancel) {
                        if (result.value !== "") {
                            if (c.callback !== undefined) {
                                c.callback(result);


                            }
                        } else {
                            c.callback(false);
                        }

                    } else {
                        c.callback(false);
                    }
                }

            }
            return {
                toast: toast,
                success: success,
                error: error,
                datePicker
            }
        }
            (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
        }

            form.classList.add('was-validated')
        }, false)
        })
        })()


            // function notify(title,text,icon,confirmText) {
            //     Swal.fire({
            //         title: title,
            //         text: text,
            //         icon: icon,
            //         confirmButtonText: confirmText,
            //         position:"top-end"
            //     })
            // }
            function notify(msg,type){
                notie.alert({
                    type:type,
                    text:msg,
                })
            }
    {{with .Error}}
    notify("{{.}}","error")
    {{end}}

    {{with .Flash}}
    notify("{{.}}" ,"success")
    {{end}}

    {{with .Warning}}
        notify("{{.}}","warning")
            {{end}}
    </script>

    </body>
    </html>

{{end}}